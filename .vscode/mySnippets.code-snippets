// ${«variable|tabstop»/«regexp»/«text|format»/«options»}
// You can think of regex/captures this way: regex is a way to search a string for specific substrings, and captures are ways to further break those substrings into chunks that can be referenced. Here, the whole regex is grouped as a single chunk.
// Sidenote: It would be easy to confuse the "1" here for referencing our tabstop $1,
// but they are entirely unrelated. In format, "1" indicates that this format is acting
// on the first capture in our regex. Note that if you wish to act on the entire regex collectively,
// you can list an int of "0" in your format. In our example, we only have one capture,
// and it is the entirety of our regex, so we could technically use "0" or "1".
{
    "test snippet": {
        "prefix": "ggg",
        "body": ["const [$1, set${1/(.*)/${1:/capitalize}/}] = useState()"],
        "description": "test snippet",
        "scope": "javascript, javascriptreact"
    },
    "Javascript Arrow Function Short": {
        "prefix": "ars",
        "body": ["($1) => $0"],
        "description": "Javascript Arrow Function",
        "scope": "javascript, javascriptreact"
    },
    "Javascript Arrow Function Full": {
        "prefix": "arf",
        "body": ["($2) => {$0}"],
        "description": "Javascript Arrow Function Full",
        "scope": "javascript, javascriptreact"
    },
    "Javascript Object Distructuring": {
        "prefix": "obd",
        "body": ["const { $0 } = ${1:myobject};"],
        "description": "Javascript Object Distructuring",
        "scope": "javascript, javascriptreact"
    },
    "Javascript Export Default": {
        "prefix": "exp",
        "body": ["export default $0"],
        "description": "Export Default Javascript",
        "scope": "javascript, javascriptreact"
    },
    "Javascript Named Export": {
        "prefix": "exn",
        "body": ["export { $0 }"],
        "description": "Javascript Named Export",
        "scope": "javascript, javascriptreact"
    },
    "Javascript Destructure Named Export": {
        "prefix": "exd",
        "body": ["export const { $0 } = ${1:object}"],
        "description": "Javascript Destructure Named Export",
        "scope": "javascript, javascriptreact"
    },
    "Javascript Variable In Template Literals": {
        "prefix": "vtl",
        "body": ["\\${$0}"],
        "description": "Javascript Variable In Template Literals",
        "scope": "javascript, javascriptreact"
    },
    "RTK Query Mutation": {
        "prefix": "rtkMutation",
        "body": ["const [${2:mutation}, { $0 }] = use$1;"],
        "description": "RTK Query Mutation",
        "scope": "javascript, javascriptreact"
    },
    "RTK Query Mutation Api": {
        "prefix": "mutationApi",
        "body": [
            "${1:mutationName}: builder.mutation({",
            "\tquery: (${2:data}) => ({",
            "\t\turl: `/${3:url}`,",
            "\t\tmethod: '${4|POST,PATCH,PUT,DELETE|}',",
            "\t\tbody: data$0,",
            "\t}),",
            "}),"
        ],
        "description": "RTK Query Mutation Api"
    },
    "File Name": {
        "prefix": "fn",
        "body": ["$TM_FILENAME_BASE"],
        "description": "File Name",
        "scope": "javascript, javascriptreact"
    },
    // React snippets
    "React Convert To Template Literals": {
        "prefix": "ctl",
        "body": ["{`${TM_SELECTED_TEXT/[\\^\"]+/$1/g}$0`}"],
        "description": "React Convert To Template Literals",
        "scope": "javascript, javascriptreact"
    },
    "React Functional Component": {
        "prefix": "arfc",
        "body": [
            "export default function $TM_FILENAME_BASE() {",
            "\treturn (",
            "\t\t$0",
            "\t);",
            "}"
        ],
        "description": "React Functional Component",
        "scope": "javascript, javascriptreact"
    },
    "React useState Snippets": {
        "prefix": "useState",
        "body": ["const [$1, set${1/(.*)/${1:/capitalize}/}] = useState(${2:''});", "$0"],
        "description": "React useState Snippets",
        "scope": "javascript, javascriptreact"
    },
    "React useEffect Snippets": {
        "prefix": "useEffect",
        "body": ["useEffect(() => {", "\t$1", "}, [$0]);"],
        "description": "React useEffect Snippets",
        "scope": "javascript, javascriptreact"
    }
}
